#   Problems are from this link
#   https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/05-Object%20Oriented%20Programming/02-Object%20Oriented%20Programming%20Homework.ipynb
#
#   Answers were given and consulted after a finished program
#   https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/05-Object%20Oriented%20Programming/03-Object%20Oriented%20Programming%20Homework%20-%20Solution.ipynb


#Fill in the Line class methods to accept coordinates as a pair of tuples and return the slope and distance of the line.
#class Line:   
#    def __init__(self,coor1,coor2):
#        pass
#    def distance(self):
#        pass    
#    def slope(self):
#        pass
class Line:
    
    def __init__(self,coor1,coor2):
        self.coor1 = coor1
        self.coor2 = coor2

    def distance(self):
        return sqrt( (self.coor1[0]-self.coor2[0])**2 + (self.coor1[1]-self.coor2[1])**2 )
    
    def slope(self):
        return (self.coor1[1]-self.coor2[1])/ (self.coor1[0]-self.coor2[0])

#Fill in the class
#class Cylinder:
#    def __init__(self,height=1,radius=1):
#        pass        
#    def volume(self):
#        pass    
#    def surface_area(self):
#        pass

class Cylinder:
    
    def __init__(self,height=1,radius=1):
        self.height = height
        self.radius = radius
        
    def volume(self):
        return 3.1415 * self.radius**2 * self.height
    
    def surface_area(self):
        return (2 * 3.1415 * self.radius * self.height) + (2 * 3.1415 * self.radius**2)


#Problem is from
#https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/05-Object%20Oriented%20Programming/04-OOP%20Challenge.ipynb
#Answer was given
#https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/05-Object%20Oriented%20Programming/05-OOP%20Challenge%20-%20Solution.ipynb

class Account:
    def __init__ (self, owner, balance):
        self.owner = owner
        self.balance = balance
    
    def deposit(self, amount):
        self.balance = self.balance + amount
        print(f'Balance is now {self.balance}')
    
    def withdraw(self, amount):
        if amount > self.balance:
            print('Balance insufficient for withdrawl')
        else:
            self.balance = self.balance - amount
            print(f'Balance is now {self.balance}')
    
    def __str__(self):
        return f'Account owner: {self.owner}\nAccount balance: ${self.balance}'
